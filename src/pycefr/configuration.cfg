[List]
simple = A1
nested = A2
with-dict = B1

[ListComp]
simple = C1
nested = C2
with-if = C1

[Dict]
simple = A2
nested = B1
with-list = B1
with-dict-list = B2

[DictComp]
simple = C1
with-if = C2
with-if-else = C2
nested = C2

[Tuple]
simple = A1
nested = A2

[File]
open = A2
write = A2
writelines = A2
read = A2
readline = A2

[Print]
simple = A1

[Assign]
simple = A1
with-sum = A1
increments = A2

[If-Statements]
simple = A1
expression = B1
__name__ = B2

[Loop]
break = B1
continue = B1
pass = B1
while-simple = B1
while-else = B1
for-simple = A1
for-nested = A2
for-tuple-name = A2
for-list-iterate = A2
for-tuple-iterate = A2
range = A2
zip = C2
map = C2
enumerate = C2

[FunctionDef]
simple = A1
argum-default = A2
argum-* = B1
argum-** = B1
argum-keyword-only = B1
recursive = B2

[Return]
simple = A1

[Lambda]
simple = B1

[Generators]
function = C1
expression = C1

[Import]
import = A2
from-simple = A2
from-relative = B1
from-*statements = B1
as-extension = B1

[Modules]
struct = C1
pickle = C1
shelve = C1
dbm = C1
re = C1
importlib = C1

[Class]
simple = B1
inherited = B1
__init__ = B1
descriptors = C1
properties = C1
private = C2

[Static]
classmethodss = C1
staticmethod = C1

[Decorators]
function = C2
class = C2

[Metaclass]
__new__ = C2
metaclass = C2
__metaclass__ = C2

[SuperFunction]
simple = C2

[Slots]
__slots__ = C1

[Attributes]
simple = A2
__class__ = B2
__dict__ = B2

[Exception]
try/except = B1
try/else/except = B1
try/try = B1
try/finally = B2
try/except/finally = B2
try/except/else/finally = B2
raise = B1
assert = B2

[With]
simple = B1
